{"version":3,"sources":["ParseData.jsx","TableComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["calculate_debits","user","bmi","debits","user_alcohol","alcohol","health","replace","split","includes","calculate_premium","cost","age","smoker","console","log","yearly","coverage","parseFloat","toFixed","parse","inputData","a","output_data","i","length","customer","name","parseInt","gender","height","weight","error","height_cm","weight_kg","user_bmi","monthly","output","BMI","score","monthlyPremium","push","TableComponent","tableData","Table","striped","bordered","style","color","map","key","App","useState","customerData","setCustomerData","className","cssClass","onFileLoaded","data","then","res","catch","onError","event","inputId","inputStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.396c3ec4.chunk.js","sourcesContent":["const calculate_debits = (user, bmi) => {\n  let debits = 0;\n\n  let user_alcohol = user.alcohol;\n  let health = user.health\n    .replace(\"[\", \"\")\n    .replace(\"]\", \"\")\n    .split(\",\");\n\n  if (health.includes(\"DEPRESSION\")) debits += 15;\n  if (health.includes(\"ANXIETY\")) debits += 15;\n  if (health.includes(\"SURGERY\")) debits += 25;\n  if (health.includes(\"HEART\")) debits += 30;\n\n  if (user[\"smoker\"] === \"S\") debits += 25;\n\n  if (user_alcohol > 10 && user_alcohol < 25) debits += 25;\n  if (user_alcohol >= 25) debits += 30;\n\n  if (bmi < 18.5) {\n    debits += 15;\n  } else if (bmi > 25.0 && bmi <= 30.0) {\n    debits += 25;\n  } else if (30.0 < bmi) {\n    debits += 30;\n  }\n\n  return debits;\n};\n\n// Height in centimeters and weight in kilograms\nconst bmi = (height_cm, weight_kg) => {\n  return parseFloat(weight_kg / (height_cm / 100)).toFixed(1);\n};\n\n// Premium Calculations state Male and Females have same coverage price,\n// this function would need to be modified to vary prices between genders\n// Coverage : 500k\nconst calculate_premium = (user, debits) => {\n  let cost = 0.0;\n  let age = user.age;\n  let smoker = user.smoker;\n\n  if (age > 18 && age < 40) {\n    if (smoker === \"NS\") cost = 0.1;\n    else if (smoker === \"S\") cost = 0.25;\n    else console.log(\"Error : Invalid Smoker Type\");\n  } else if (age >= 40 && age < 60) {\n    if (smoker === \"NS\") cost = 0.3;\n    else if (smoker === \"S\") cost = 0.55;\n    else console.log(\"Error : Invalid Smoker Type\");\n  } else if (age > 60) {\n    console.log(\"Error : Age \" + age + \" outside of coverage price range\");\n  }\n\n  let coverage = 500000;\n  let insuring_per_year = 1000;\n  let yearly = (coverage / insuring_per_year) * cost;\n\n  if (debits > 75 && debits < 100) yearly *= 1.15;\n  if (debits >= 100) yearly *= 1.25;\n\n  let monthly = parseFloat(yearly / 12, 2).toFixed(2);\n\n  return monthly;\n};\n\nexport const parse = async inputData => {\n  let output_data = [];\n\n  for (let i = 1; i < inputData.length; i++) {\n    let customer = {};\n    try {\n      customer = {\n        name: inputData[i][0],\n        age: parseInt(inputData[i][1]),\n        gender: inputData[i][2],\n        smoker: inputData[i][3],\n        height: parseInt(inputData[i][5]),\n        weight: parseInt(inputData[i][6]),\n        health: inputData[i][7],\n        alcohol: parseInt(inputData[i][8])\n      };\n    } catch (error) {\n      console.log(error);\n    }\n\n    let user_bmi = bmi(customer.height, customer.weight);\n    let debits = calculate_debits(customer, user_bmi);\n    let monthly = calculate_premium(customer, debits);\n\n    let output = {\n      name: customer.name,\n      BMI: user_bmi,\n      score: debits,\n      monthlyPremium: monthly\n    };\n    output_data.push(output);\n  }\n  return output_data;\n};\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nexport default function TableComponent({ tableData }) {\n  return (\n    <Table striped bordered style={{ color: \"white\" }}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>BMI</th>\n          <th>Score</th>\n          <th>Monthly Premium</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tableData &&\n          tableData.map(({ name, BMI, score, monthlyPremium }) => (\n            <tr key={`${name}/${score}`}>\n              <td>{name}</td>\n              <td>{BMI}</td>\n              <td>{score}</td>\n              <td>{monthlyPremium}</td>\n            </tr>\n          ))}\n      </tbody>\n    </Table>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CSVReader from \"react-csv-reader\";\nimport { parse } from \"./ParseData\";\nimport TableComponent from \"./TableComponent\";\n\nfunction App() {\n  const [customerData, setCustomerData] = useState([]);\n\n  const handleCSV = data => {\n    parse(data, {})\n      .then(res => {\n        console.log(res);\n        setCustomerData(res);\n      })\n      .catch(error => console.log(error));\n  };\n\n  const handlCSVError = event => {\n    console.log(\"Error : \", event);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"Container\">\n          <h1>\n            <code style={{ color: \"white\" }}>Premium</code>\n          </h1>\n\n          <CSVReader\n            cssClass=\"csv-reader-input\"\n            onFileLoaded={handleCSV}\n            onError={handlCSVError}\n            inputId=\"customer_data\"\n            inputStyle={{ color: \"red\" }}\n          />\n\n          <TableComponent tableData={customerData} />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}